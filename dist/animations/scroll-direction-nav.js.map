{
  "version": 3,
  "sources": ["../../bin/live-reload.js", "../../src/utils/scroll-direction-manager.ts", "../../src/animations/scroll-direction-nav.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\r\n", "/**\r\n * Source Code: https://github.com/masaroli/scroll-direction-manager\r\n */\r\n\r\nexport type ScrollDirection = 'initial' | 'up' | 'down';\r\n\r\ntype ScrollDirectionManagerOptions = {\r\n  initialOffset?: number;\r\n  onDirectionChange?: (direction: ScrollDirection) => void;\r\n};\r\n\r\n/**\r\n * @example\r\n * const scrollDirection = new ScrollDirection({\r\n *   onDirectionChange: (direction) => {\r\n *     if (direction === \"up\") // do something if its up\r\n *     else if (direction === \"initial\") // do if its initial\r\n *   },\r\n *    treshold: 30\r\n * })\r\n */\r\n\r\nexport class ScrollDirectionManager {\r\n  private readonly onDirectionChange: ScrollDirectionManagerOptions['onDirectionChange'] =\r\n    undefined;\r\n  private scrollPosition: number;\r\n  private scrollDirection: ScrollDirection = 'initial';\r\n  private readonly initialOffset: number = 120;\r\n  private removeListener: (() => void) | undefined = undefined;\r\n\r\n  public constructor({ initialOffset, onDirectionChange }: ScrollDirectionManagerOptions) {\r\n    this.scrollPosition = 0;\r\n    if (initialOffset) this.initialOffset = initialOffset;\r\n    this.onDirectionChange = onDirectionChange;\r\n    this.setupSubscriptions();\r\n  }\r\n\r\n  private readonly setupSubscriptions = (): void => {\r\n    window.addEventListener('scroll', this.handleScrollDirection);\r\n    this.removeListener = () => window.removeEventListener('scroll', this.handleScrollDirection);\r\n  };\r\n\r\n  private readonly handleScrollDirection = (): void => {\r\n    const position = window.scrollY;\r\n    let direction: ScrollDirection = 'initial';\r\n\r\n    if (position > this.initialOffset) {\r\n      if (position < this.scrollPosition) {\r\n        direction = 'up';\r\n      } else {\r\n        direction = 'down';\r\n      }\r\n    }\r\n\r\n    if (direction !== this.scrollDirection) {\r\n      this.onDirectionChange?.(direction);\r\n    }\r\n\r\n    this.scrollPosition = position;\r\n    this.scrollDirection = direction;\r\n  };\r\n\r\n  public dispose(): void {\r\n    this.removeListener?.();\r\n  }\r\n}\r\n", "import { ScrollDirectionManager } from '@/utils/scroll-direction-manager';\r\n\r\nconst init = () => {\r\n  const navbar = document.querySelector<HTMLDivElement>('[data-navbar]');\r\n\r\n  if (!navbar) return;\r\n\r\n  const parsedInitialOffset = Number.parseFloat(navbar.dataset.initialOffset || '');\r\n  const initialOffset = Number.isNaN(parsedInitialOffset) ? 1 : parsedInitialOffset;\r\n\r\n  new ScrollDirectionManager({\r\n    initialOffset,\r\n    onDirectionChange: (direction) => {\r\n      if (direction === 'up' || direction === 'initial') {\r\n        navbar.classList.remove('hide-navbar');\r\n        return;\r\n      }\r\n      navbar.classList.add('hide-navbar');\r\n    },\r\n  });\r\n\r\n  const initNavbarBgToggle = () => {\r\n    const navbar = document.querySelector<HTMLDivElement>('[data-navbar]');\r\n\r\n    if (!navbar) return;\r\n\r\n    const interSectionObserver = new IntersectionObserver(\r\n      (entries) => {\r\n        for (const entry of entries) {\r\n          if (entry.isIntersecting) {\r\n            navbar?.classList.add('below--top');\r\n          } else {\r\n            navbar?.classList.remove('below--top');\r\n          }\r\n        }\r\n      },\r\n      {\r\n        root: null,\r\n        threshold: 0.1,\r\n      }\r\n    );\r\n\r\n    interSectionObserver.observe(document.body);\r\n  };\r\n\r\n  initNavbarBgToggle();\r\n};\r\n\r\ninit();\r\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACsBtF,MAAM,yBAAN,MAA6B;AAAA,IAQ3B,YAAY,EAAE,eAAe,kBAAkB,GAAkC;AAPxF,WAAiB,oBACf;AAEF,WAAQ,kBAAmC;AAC3C,WAAiB,gBAAwB;AACzC,WAAQ,iBAA2C;AASnD,WAAiB,qBAAqB,MAAY;AAChD,eAAO,iBAAiB,UAAU,KAAK,qBAAqB;AAC5D,aAAK,iBAAiB,MAAM,OAAO,oBAAoB,UAAU,KAAK,qBAAqB;AAAA,MAC7F;AAEA,WAAiB,wBAAwB,MAAY;AACnD,cAAM,WAAW,OAAO;AACxB,YAAI,YAA6B;AAEjC,YAAI,WAAW,KAAK,eAAe;AACjC,cAAI,WAAW,KAAK,gBAAgB;AAClC,wBAAY;AAAA,UACd,OAAO;AACL,wBAAY;AAAA,UACd;AAAA,QACF;AAEA,YAAI,cAAc,KAAK,iBAAiB;AACtC,eAAK,oBAAoB,SAAS;AAAA,QACpC;AAEA,aAAK,iBAAiB;AACtB,aAAK,kBAAkB;AAAA,MACzB;AA7BE,WAAK,iBAAiB;AACtB,UAAI;AAAe,aAAK,gBAAgB;AACxC,WAAK,oBAAoB;AACzB,WAAK,mBAAmB;AAAA,IAC1B;AAAA,IA2BO,UAAgB;AACrB,WAAK,iBAAiB;AAAA,IACxB;AAAA,EACF;;;AC/DA,MAAM,OAAO,MAAM;AACjB,UAAM,SAAS,SAAS,cAA8B,eAAe;AAErE,QAAI,CAAC;AAAQ;AAEb,UAAM,sBAAsB,OAAO,WAAW,OAAO,QAAQ,iBAAiB,EAAE;AAChF,UAAM,gBAAgB,OAAO,MAAM,mBAAmB,IAAI,IAAI;AAE9D,QAAI,uBAAuB;AAAA,MACzB;AAAA,MACA,mBAAmB,CAAC,cAAc;AAChC,YAAI,cAAc,QAAQ,cAAc,WAAW;AACjD,iBAAO,UAAU,OAAO,aAAa;AACrC;AAAA,QACF;AACA,eAAO,UAAU,IAAI,aAAa;AAAA,MACpC;AAAA,IACF,CAAC;AAED,UAAM,qBAAqB,MAAM;AAC/B,YAAMA,UAAS,SAAS,cAA8B,eAAe;AAErE,UAAI,CAACA;AAAQ;AAEb,YAAM,uBAAuB,IAAI;AAAA,QAC/B,CAAC,YAAY;AACX,qBAAW,SAAS,SAAS;AAC3B,gBAAI,MAAM,gBAAgB;AACxB,cAAAA,SAAQ,UAAU,IAAI,YAAY;AAAA,YACpC,OAAO;AACL,cAAAA,SAAQ,UAAU,OAAO,YAAY;AAAA,YACvC;AAAA,UACF;AAAA,QACF;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,WAAW;AAAA,QACb;AAAA,MACF;AAEA,2BAAqB,QAAQ,SAAS,IAAI;AAAA,IAC5C;AAEA,uBAAmB;AAAA,EACrB;AAEA,OAAK;",
  "names": ["navbar"]
}
