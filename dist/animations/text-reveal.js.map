{
  "version": 3,
  "sources": ["../../bin/live-reload.js", "../../node_modules/.pnpm/@finsweet+ts-utils@0.40.0/node_modules/@finsweet/ts-utils/dist/helpers/wait.js", "../../src/utils/constants.ts", "../../src/utils/common.ts", "../../src/utils/valueGetters.ts", "../../src/utils/word-wrap-remover.ts", "../../src/animations/text-reveal.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\r\n", "/**\n * @returns Awaitable promise for waiting X time.\n * @param time\n */\nexport const wait = (time) => new Promise((resolve) => setTimeout(resolve, time));\n", "export const selectors = {\r\n  revealType: '[data-reveal-type]',\r\n  revealParent: '[data-reveal-parent]',\r\n  toggleScroll: '[data-toggle-scroll]',\r\n  startScroll: '[data-start-scroll]',\r\n  stopScroll: '[data-stop-scroll]',\r\n  resetAnimation: '[data-reset-animation]',\r\n  keepSplit: '[data-reset-animation]',\r\n} as const;\r\n\r\nconst revealTypeValuesArray = ['chars', 'words', 'lines'] as const;\r\nexport const revealTypeValuesSet: Set<string> = new Set(revealTypeValuesArray);\r\nexport type RevealTypeValue = (typeof revealTypeValuesArray)[number];\r\n\r\nconst animationTypeValuesArray = ['from-top', 'from-bottom', 'fade-from-bottom-left'] as const;\r\nexport const animationTypeValuesSet: Set<string> = new Set(animationTypeValuesArray);\r\nexport type AnimationTypeValue = (typeof animationTypeValuesArray)[number];\r\n\r\nexport type AnimationDataProps = {\r\n  revealType: RevealTypeValue;\r\n  animationType: AnimationTypeValue;\r\n  duration: number;\r\n  easing: string;\r\n  delay: number;\r\n  staggerDelay: number;\r\n  fromX: string | undefined;\r\n  fromY: string | undefined;\r\n  fromOpacity: string | undefined;\r\n  viewThreshold: number;\r\n  resetAnimation: string | undefined;\r\n};\r\n\r\nexport type AnimationDataKeys = keyof AnimationDataProps;\r\n\r\nconst gsapEaseArray = [\r\n  'power1',\r\n  'power1.in',\r\n  'power1.out',\r\n  'power1.inOut',\r\n  'power2',\r\n  'power2.in',\r\n  'power2.out',\r\n  'power2.inOut',\r\n  'power3',\r\n  'power3.in',\r\n  'power3.out',\r\n  'power3.inOut',\r\n  'power4',\r\n  'power4.in',\r\n  'power4.out',\r\n  'power4.inOut',\r\n  'back',\r\n  'back.in',\r\n  'back.out',\r\n  'back.inOut',\r\n  'bounce',\r\n  'bounce.in',\r\n  'bounce.out',\r\n  'bounce.inOut',\r\n  'circ',\r\n  'circ.in',\r\n  'circ.out',\r\n  'circ.inOut',\r\n  'elastic',\r\n  'elastic.in',\r\n  'elastic.out',\r\n  'elastic.inOut',\r\n  'expo',\r\n  'expo.in',\r\n  'expo.out',\r\n  'expo.inOut',\r\n  'sine',\r\n  'sine.in',\r\n  'sine.out',\r\n  'sine.inOut',\r\n] as const;\r\nexport const gsapEaseSet: Set<string> = new Set(gsapEaseArray);\r\nexport type GsapEaseType = (typeof gsapEaseArray)[number];\r\n", "class AssertionError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'AssertionError';\r\n  }\r\n}\r\n\r\nexport const assert = <T>(value: T, message: string, condition?: (value: T) => boolean) => {\r\n  if (\r\n    value === null ||\r\n    value === undefined ||\r\n    Number.isNaN(value) ||\r\n    (condition && !condition(value))\r\n  ) {\r\n    throw new AssertionError(message);\r\n  }\r\n  return value;\r\n};\r\n\r\nexport const fallback = <T>(\r\n  value: T,\r\n  replacementValue: NonUndefined<T>,\r\n  condition?: (value: T) => boolean\r\n) => {\r\n  if (value !== undefined && condition && !condition(value)) {\r\n    //eslint-disable-next-line no-console\r\n    console.debug(`\"${value}\" was not used, fallbacking to \"${replacementValue}\"`);\r\n    return replacementValue;\r\n  }\r\n  if (value === undefined || Number.isNaN(value)) {\r\n    //eslint-disable-next-line no-console\r\n    console.debug(`\"${value}\" was not used, fallbacking to \"${replacementValue}\"`);\r\n    return replacementValue;\r\n  }\r\n\r\n  if (value === 0) return value;\r\n\r\n  return value;\r\n};\r\n\r\nexport const wait = (ms: number) => new Promise((res) => setTimeout(res, ms));\r\n", "import { fallback } from './common';\r\nimport {\r\n  type AnimationDataKeys,\r\n  type AnimationDataProps,\r\n  type AnimationTypeValue,\r\n  animationTypeValuesSet,\r\n  gsapEaseSet,\r\n  type GsapEaseType,\r\n  type RevealTypeValue,\r\n  revealTypeValuesSet,\r\n} from './constants';\r\n\r\nexport const getAnimationValues = (\r\n  element: HTMLElement,\r\n  defaultValues?: AnimationDataProps,\r\n  parentEl?: HTMLElement\r\n): AnimationDataProps => {\r\n  const {\r\n    animationType,\r\n    delay,\r\n    duration,\r\n    easing,\r\n    revealType,\r\n    staggerDelay,\r\n    fromX,\r\n    fromY,\r\n    fromOpacity,\r\n    viewThreshold,\r\n    resetAnimation,\r\n  } = element.dataset as Record<AnimationDataKeys, string | undefined>;\r\n  const parentViewThreshold = parentEl?.dataset.viewThreshold;\r\n\r\n  const selectedAnimationType = fallback(\r\n    animationType,\r\n    defaultValues?.animationType ?? 'from-bottom',\r\n    (value) => value !== undefined && animationTypeValuesSet.has(value)\r\n  ) as AnimationTypeValue;\r\n\r\n  const selectedRevealType = fallback(\r\n    revealType,\r\n    defaultValues?.revealType ?? 'chars',\r\n    (value) => value !== undefined && revealTypeValuesSet.has(value)\r\n  ) as RevealTypeValue;\r\n\r\n  const selectedEasing = fallback(\r\n    easing,\r\n    defaultValues?.easing ?? 'powe3.out',\r\n    (value) => value !== undefined && gsapEaseSet.has(value)\r\n  ) as GsapEaseType;\r\n\r\n  const selectedDelay = fallback(Number.parseFloat(delay || ''), defaultValues?.delay ?? 0);\r\n  const selectedViewThreshold = fallback(\r\n    Number.parseFloat(viewThreshold || parentViewThreshold || ''),\r\n    defaultValues?.viewThreshold ?? 0.8\r\n  );\r\n  const selectedDuration = fallback(\r\n    Number.parseFloat(duration || ''),\r\n    defaultValues?.duration ?? 0.5\r\n  );\r\n  const selectedStaggerDelay = fallback(\r\n    Number.parseFloat(staggerDelay || ''),\r\n    defaultValues?.staggerDelay ?? 0.05\r\n  );\r\n\r\n  return {\r\n    animationType: selectedAnimationType,\r\n    revealType: selectedRevealType,\r\n    delay: selectedDelay,\r\n    duration: selectedDuration,\r\n    easing: selectedEasing,\r\n    staggerDelay: selectedStaggerDelay,\r\n    fromX,\r\n    fromY,\r\n    fromOpacity,\r\n    viewThreshold: selectedViewThreshold,\r\n    resetAnimation,\r\n  };\r\n};\r\n", "/**\r\n * Wraps words containing hyphens in span elements to prevent unwanted word breaks\r\n * @param element The HTML element to process\r\n */\r\nexport function wrapHyphenatedWords(element: HTMLElement): HTMLElement {\r\n  // Process all text nodes that contain hyphens\r\n  const textNodes = getTextNodesWithHyphens(element);\r\n\r\n  textNodes.forEach((textNode) => {\r\n    const text = textNode.nodeValue || '';\r\n\r\n    // Create a document fragment to hold the modified content\r\n    const fragment = document.createDocumentFragment();\r\n\r\n    // Split the text by spaces while preserving whitespace\r\n    const parts = text.split(/(\\s+)/);\r\n\r\n    for (const part of parts) {\r\n      // Check if the part contains a hyphen and is not just whitespace\r\n      if (part.includes('-') && /\\S/.test(part)) {\r\n        const span = document.createElement('span');\r\n        span.classList.add('split-word-nowrap');\r\n        span.textContent = part;\r\n        fragment.appendChild(span);\r\n      } else {\r\n        // Keep non-hyphenated parts as they are\r\n        fragment.appendChild(document.createTextNode(part));\r\n      }\r\n    }\r\n\r\n    // Replace the original text node with our fragment\r\n    if (textNode.parentNode) {\r\n      textNode.parentNode.replaceChild(fragment, textNode);\r\n    }\r\n  });\r\n  return element;\r\n}\r\n\r\n/**\r\n * Gets all text nodes within an element that contain hyphens\r\n * @param element The element to search within\r\n * @returns Array of text nodes containing hyphens\r\n */\r\nfunction getTextNodesWithHyphens(element: Node): Text[] {\r\n  const result: Text[] = [];\r\n\r\n  // Use TreeWalker for efficient DOM traversal\r\n  const walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, null);\r\n\r\n  let node;\r\n  while ((node = walker.nextNode())) {\r\n    const textNode = node as Text;\r\n    // Only include text nodes that contain hyphens\r\n    if (textNode.nodeValue && textNode.nodeValue.includes('-')) {\r\n      result.push(textNode);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n", "import { wait } from '@finsweet/ts-utils';\r\n\r\nimport { selectors } from '@/utils/constants';\r\nimport type { GsapTweenVars } from '@/utils/types';\r\nimport { getAnimationValues } from '@/utils/valueGetters';\r\nimport { wrapHyphenatedWords } from '@/utils/word-wrap-remover';\r\n\r\n/**\r\n * Text Reveal Animation Module\r\n *\r\n * This module creates animated text reveals using GSAP and SplitText.\r\n * It supports splitting text into characters, words, or lines and animating them\r\n * with different entrance animations when they enter the viewport.\r\n */\r\n\r\n// Select all elements with a data-reveal-type attribute (chars, words, or lines)\r\nconst charRevealElements = document.querySelectorAll<HTMLElement>(selectors.revealType);\r\n\r\n// Check if page has a loader by parsing loader duration from body attribute\r\nconst loaderDuration = Number.parseInt(document.body.dataset.loaderDuration ?? '');\r\nconst doesLoaderExist = !Number.isNaN(loaderDuration);\r\n\r\n// Type alias for GSAP timeline\r\ntype Timeline = gsap.core.Timeline;\r\n\r\n/**\r\n * Initialize text reveal animations\r\n */\r\n\r\nconst init = () => {\r\n  try {\r\n    // eslint-disable-next-line no-console\r\n    console.debug('GSAP Version: ' + gsap.version);\r\n  } catch (error) {\r\n    throw new Error(\r\n      'GSAP is not imported. GSAP Script must be loaded before text-reveal script. Get it from here: https://gsap.com/docs/v3/Installation/?tab=cdn&module=esm&require=false&plugins=SplitText'\r\n    );\r\n  }\r\n  try {\r\n    gsap.registerPlugin(SplitText);\r\n  } catch (error) {\r\n    throw new Error(\r\n      'SplitText plugin script is not imported. SplitText Script must be loaded after GSAP script and before text-reveal script. Get it from here: https://gsap.com/docs/v3/Installation/?tab=cdn&module=esm&require=false&plugins=SplitText'\r\n    );\r\n  }\r\n\r\n  // Process each text reveal element\r\n  for (let i = 0; i < charRevealElements.length; i++) {\r\n    // Target element to animate\r\n    const charRevealEl = charRevealElements[i]!;\r\n\r\n    // Find parent element for intersection observation\r\n    // If data-reveal-parent exists, use it, otherwise use the element itself\r\n    const charRevealParentEl =\r\n      charRevealEl.closest<HTMLElement>(selectors.revealParent) || charRevealEl;\r\n\r\n    // Extract animation configuration from data attributes\r\n    // These values determine how the animation will behave\r\n    const {\r\n      animationType, // Type of animation (from-bottom, from-top, fade-from-bottom-left)\r\n      delay, // Delay before animation starts\r\n      duration, // Duration of animation\r\n      easing, // Easing function\r\n      revealType, // How text is split (chars, words, lines)\r\n      staggerDelay, // Delay between each animated element\r\n      fromX, // Starting X position for fade-from-bottom-left\r\n      fromY, // Starting Y position for fade-from-bottom-left\r\n      fromOpacity, // Starting opacity for fade-from-bottom-left\r\n      viewThreshold, // Viewport threshold to trigger animation\r\n    } = getAnimationValues(charRevealEl, undefined, charRevealParentEl);\r\n\r\n    /**\r\n     * Determine if split text should remain split after animation\r\n     * Checks data-keep-split on element or closest ancestor with that attribute\r\n     */\r\n    const getKeepSplit = () => {\r\n      let value =\r\n        charRevealEl.dataset.keepSplit ||\r\n        charRevealEl.closest<HTMLElement>('[data-keep-split]')?.dataset.keepSplit;\r\n\r\n      if (value === 'true') return true;\r\n      if (value === 'false') return false;\r\n\r\n      return false;\r\n    };\r\n\r\n    /**\r\n     * Determine if animation should reset when element leaves viewport\r\n     * Checks data-reset-animation on element or closest ancestor with that attribute\r\n     */\r\n    const getResetAnimation = () => {\r\n      let value =\r\n        charRevealEl.dataset.resetAnimation ||\r\n        charRevealEl.closest<HTMLElement>('[data-reset-animation]')?.dataset.resetAnimation;\r\n\r\n      if (value === 'true') return true;\r\n      if (value === 'false') return false;\r\n\r\n      return false;\r\n    };\r\n\r\n    const keepSplit = getKeepSplit();\r\n    const shouldAnimationReset = getResetAnimation();\r\n\r\n    // Animation properties for initial (hidden) and final (visible) states\r\n    let initialAnimationProps: GsapTweenVars = {};\r\n    let finalAnimationProps: GsapTweenVars = {};\r\n\r\n    // Configure animation properties based on animation type\r\n    if (animationType === 'from-bottom') {\r\n      // Start below and animate up\r\n      initialAnimationProps.y = '100%';\r\n      finalAnimationProps.y = '0%';\r\n    } else if (animationType === 'from-top') {\r\n      // Start above and animate down\r\n      initialAnimationProps.y = '-100%';\r\n      finalAnimationProps.y = '0%';\r\n    } else if (animationType === 'fade-from-bottom-left') {\r\n      // Start from bottom-left with fade-in\r\n      initialAnimationProps.y = fromY || '30%';\r\n      initialAnimationProps.x = fromX || '-50px';\r\n      initialAnimationProps.opacity = fromOpacity || '0.05';\r\n\r\n      finalAnimationProps.y = '0%';\r\n      finalAnimationProps.x = '0%';\r\n      finalAnimationProps.opacity = '1';\r\n    }\r\n\r\n    // Add common animation properties\r\n    finalAnimationProps.delay = delay;\r\n    finalAnimationProps.duration = duration;\r\n    finalAnimationProps.ease = easing;\r\n    finalAnimationProps.stagger = staggerDelay;\r\n\r\n    // References to store created GSAP and SplitText instances\r\n    let ctx: gsap.Context | undefined = undefined;\r\n    let tl: Timeline | undefined = undefined;\r\n    let splitter: globalThis.SplitText | undefined = undefined;\r\n    let splittedElements: Element[] | undefined = undefined;\r\n\r\n    /**\r\n     * Clean up GSAP timeline and context\r\n     */\r\n    const destroyTimeline = () => {\r\n      if (tl) {\r\n        tl.revert();\r\n        tl = undefined;\r\n      }\r\n      if (ctx) {\r\n        ctx.revert();\r\n        ctx = undefined;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Create GSAP timeline for the animation\r\n     */\r\n    const initTimeline = () => {\r\n      ctx = gsap.context(() => {\r\n        // Create paused timeline - will be played when element enters viewport\r\n        tl = gsap.timeline({ paused: true });\r\n\r\n        // Set initial state (hidden)\r\n        tl.set(splittedElements!, initialAnimationProps).add('start');\r\n\r\n        // Animate to final state (visible)\r\n        tl.to(splittedElements!, finalAnimationProps).add('end');\r\n\r\n        // Set tiny progress to ensure initial state is applied\r\n        tl.progress(0.001);\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Reset animation by destroying timeline and reverting split text\r\n     */\r\n    const resetSplitAnimation = () => {\r\n      destroyTimeline();\r\n      splitter?.revert();\r\n\r\n      // Fix layout shift for line animations\r\n      if (revealType === 'lines' && !keepSplit) {\r\n        fixLineLayoutShiftAfterRevert();\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Fix layout shift for line animations by setting width before splitting\r\n     * This prevents content jumps when text is split into lines\r\n     * Uses getBoundingClientRect() to get precise decimal pixel values instead of\r\n     * offsetWidth which rounds down to integers\r\n     */\r\n    const fixLineLayoutShiftBeforeSplit = () => {\r\n      // Get exact width with decimal precision\r\n      const rect = charRevealEl.getBoundingClientRect();\r\n      const charRevealElWidth = rect.width + 'px';\r\n\r\n      charRevealEl.style.minWidth = charRevealElWidth;\r\n    };\r\n\r\n    /**\r\n     * Remove fixed width after animation reverts\r\n     */\r\n    const fixLineLayoutShiftAfterRevert = () => {\r\n      charRevealEl.style.removeProperty('min-width');\r\n    };\r\n\r\n    /**\r\n     * Create SplitText instance and configure it based on animation settings\r\n     */\r\n    const getSplitter = () => {\r\n      // Fix layout issues for line animations\r\n      if (revealType === 'lines' && !keepSplit) {\r\n        wrapHyphenatedWords(charRevealEl);\r\n        fixLineLayoutShiftBeforeSplit();\r\n      }\r\n\r\n      const splitter = SplitText.create(charRevealEl, {\r\n        // For char animations, we need to split into words first, then chars\r\n        type: revealType === 'chars' ? 'words, chars' : revealType,\r\n        // To make lines responsive\r\n        autoSplit: revealType === 'lines',\r\n\r\n        // Only use masks for from-top/from-bottom animations (not for fade animations)\r\n        mask:\r\n          animationType === 'fade-from-bottom-left'\r\n            ? undefined\r\n            : revealType === 'chars'\r\n              ? 'words'\r\n              : revealType,\r\n        // To make sure chars wont break\r\n        smartWrap: revealType === 'chars',\r\n\r\n        // CSS classes for split elements\r\n        charsClass: 'split-chars',\r\n        wordsClass: 'split-words',\r\n        linesClass: 'split-lines',\r\n\r\n        // Initialize timeline when on split\r\n        onSplit: (split) => {\r\n          splittedElements = split[revealType];\r\n          initTimeline();\r\n        },\r\n      });\r\n\r\n      // Mark element as initialized so CSS can show it\r\n      // Works with CSS: [data-reveal-type]:not([data-initialized]) { visibility: hidden; }\r\n      charRevealEl.dataset.initialized = '';\r\n      return splitter;\r\n    };\r\n\r\n    /**\r\n     * Handle element entering viewport - play animation\r\n     */\r\n    const onEnter = () => {\r\n      if (!tl) return;\r\n\r\n      // Play animation and clean up after if not keeping split text\r\n      tl.restart(true).then(() => {\r\n        if (keepSplit) return;\r\n        resetSplitAnimation();\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Handle element leaving viewport - reset for animations that should restart\r\n     */\r\n    const onLeave = () => {\r\n      if (!shouldAnimationReset) return;\r\n\r\n      resetSplitAnimation();\r\n      // Recreate split text when element leaves viewport\r\n      splitter = getSplitter();\r\n    };\r\n\r\n    /**\r\n     * Set up split text and intersection observers\r\n     */\r\n    const initSplitSetup = () => {\r\n      // Create initial split text setup\r\n      splitter = getSplitter();\r\n\r\n      // Create observer to detect when element enters viewport\r\n      const revealObserver = new IntersectionObserver(\r\n        (entries) => {\r\n          for (const entry of entries) {\r\n            if (entry.isIntersecting) {\r\n              onEnter();\r\n              // If animation doesn't restart, we don't need to observe anymore\r\n              if (shouldAnimationReset) return;\r\n              revealObserver.unobserve(entry.target);\r\n            }\r\n          }\r\n        },\r\n        {\r\n          threshold: viewThreshold, // How much of element must be visible\r\n        }\r\n      );\r\n      revealObserver.observe(charRevealParentEl);\r\n\r\n      // For restart animations, create observer to detect when element leaves viewport\r\n      if (shouldAnimationReset) {\r\n        const resetObserver = new IntersectionObserver(\r\n          (entries) => {\r\n            for (const entry of entries) {\r\n              if (entry.isIntersecting) return;\r\n              onLeave();\r\n            }\r\n          },\r\n          {\r\n            threshold: 0,\r\n          }\r\n        );\r\n        resetObserver.observe(charRevealParentEl);\r\n      }\r\n    };\r\n\r\n    // Initialize based on whether page has a loader\r\n    if (doesLoaderExist) {\r\n      // If page has loader, wait for both loader and fonts before initializing\r\n      window.addEventListener('load', async () => {\r\n        const fontsReadyPromise = document.fonts.ready;\r\n        const loaderPromise = wait(loaderDuration);\r\n        await Promise.all([fontsReadyPromise, loaderPromise]);\r\n        initSplitSetup();\r\n      });\r\n    } else {\r\n      // Otherwise just wait for fonts to be ready\r\n      document.fonts.ready.then(() => {\r\n        initSplitSetup();\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n// Start the module\r\ninit();\r\n"],
  "mappings": "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",
  "names": ["splitter"]
}
